
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ScannerBuffer;
import java_cup.runtime.XMLElement;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamWriter;
import java.io.*;
import java.util.*;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\002\000\002\004\004\000\002\004\003" +
    "\000\002\004\003\000\002\005\005\000\002\006\010\000" +
    "\002\006\006\000\002\006\007\000\002\007\003\000\002" +
    "\007\005\000\002\010\005\000\002\010\003\000\002\010" +
    "\003\000\002\010\004\000\002\010\005\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\013\003\000\002" +
    "\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\004\007\005\001\002\000\004\002\075\001" +
    "\002\000\014\004\ufffe\006\ufffe\010\ufffe\013\ufffe\041\ufffe" +
    "\001\002\000\014\004\015\006\013\010\016\013\011\041" +
    "\010\001\002\000\004\041\074\001\002\000\014\004\ufffb" +
    "\006\ufffb\010\ufffb\013\ufffb\041\ufffb\001\002\000\016\015" +
    "\070\016\064\017\065\020\066\021\071\031\072\001\002" +
    "\000\014\004\uffff\006\uffff\010\uffff\013\uffff\041\uffff\001" +
    "\002\000\004\011\060\001\002\000\014\004\ufffc\006\ufffc" +
    "\010\ufffc\013\ufffc\041\ufffc\001\002\000\004\011\017\001" +
    "\002\000\004\002\000\001\002\000\014\011\026\013\024" +
    "\014\021\030\022\032\023\001\002\000\014\011\026\013" +
    "\024\014\021\030\022\032\023\001\002\000\040\012\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3" +
    "\041\ufff3\001\002\000\014\011\uffdc\013\uffdc\014\uffdc\030" +
    "\uffdc\032\uffdc\001\002\000\014\011\uffdb\013\uffdb\014\uffdb" +
    "\030\uffdb\032\uffdb\001\002\000\040\012\ufff2\022\ufff2\023" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\032\ufff2\033\ufff2" +
    "\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\001" +
    "\002\000\036\012\050\022\031\023\037\024\041\025\045" +
    "\026\046\027\035\032\030\033\036\034\044\035\032\036" +
    "\033\037\042\040\034\001\002\000\014\011\026\013\024" +
    "\014\021\030\022\032\023\001\002\000\036\012\043\022" +
    "\031\023\037\024\041\025\045\026\046\027\035\032\030" +
    "\033\036\034\044\035\032\036\033\037\042\040\034\001" +
    "\002\000\014\011\uffe8\013\uffe8\014\uffe8\030\uffe8\032\uffe8" +
    "\001\002\000\014\011\uffe3\013\uffe3\014\uffe3\030\uffe3\032" +
    "\uffe3\001\002\000\014\011\uffe6\013\uffe6\014\uffe6\030\uffe6" +
    "\032\uffe6\001\002\000\014\011\uffe5\013\uffe5\014\uffe5\030" +
    "\uffe5\032\uffe5\001\002\000\014\011\uffe2\013\uffe2\014\uffe2" +
    "\030\uffe2\032\uffe2\001\002\000\014\011\uffdd\013\uffdd\014" +
    "\uffdd\030\uffdd\032\uffdd\001\002\000\014\011\uffe9\013\uffe9" +
    "\014\uffe9\030\uffe9\032\uffe9\001\002\000\014\011\uffe1\013" +
    "\uffe1\014\uffe1\030\uffe1\032\uffe1\001\002\000\014\011\026" +
    "\013\024\014\021\030\022\032\023\001\002\000\014\011" +
    "\uffe0\013\uffe0\014\uffe0\030\uffe0\032\uffe0\001\002\000\014" +
    "\011\uffe4\013\uffe4\014\uffe4\030\uffe4\032\uffe4\001\002\000" +
    "\040\012\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\040\ufff4\041\ufff4\001\002\000\014\011\uffe7\013\uffe7" +
    "\014\uffe7\030\uffe7\032\uffe7\001\002\000\014\011\uffdf\013" +
    "\uffdf\014\uffdf\030\uffdf\032\uffdf\001\002\000\014\011\uffde" +
    "\013\uffde\014\uffde\030\uffde\032\uffde\001\002\000\040\012" +
    "\ufff0\022\031\023\037\024\041\025\045\026\046\027\035" +
    "\032\030\033\036\034\044\035\032\036\033\037\042\040" +
    "\034\041\ufff0\001\002\000\016\004\ufff8\005\051\006\ufff8" +
    "\010\ufff8\013\ufff8\041\ufff8\001\002\000\014\004\015\006" +
    "\013\007\054\013\011\041\010\001\002\000\014\004\ufff6" +
    "\006\ufff6\010\ufff6\013\ufff6\041\ufff6\001\002\000\014\004" +
    "\ufff9\006\ufff9\010\ufff9\013\ufff9\041\ufff9\001\002\000\012" +
    "\004\015\006\013\013\011\041\010\001\002\000\004\010" +
    "\056\001\002\000\014\004\ufff5\006\ufff5\010\ufff5\013\ufff5" +
    "\041\ufff5\001\002\000\040\012\ufff1\022\031\023\037\024" +
    "\041\025\045\026\046\027\035\032\030\033\036\034\044" +
    "\035\032\036\033\037\042\040\034\041\ufff1\001\002\000" +
    "\014\011\026\013\024\014\021\030\022\032\023\001\002" +
    "\000\036\012\062\022\031\023\037\024\041\025\045\026" +
    "\046\027\035\032\030\033\036\034\044\035\032\036\033" +
    "\037\042\040\034\001\002\000\014\004\015\006\013\007" +
    "\054\013\011\041\010\001\002\000\014\004\ufff7\006\ufff7" +
    "\010\ufff7\013\ufff7\041\ufff7\001\002\000\014\011\uffed\013" +
    "\uffed\014\uffed\030\uffed\032\uffed\001\002\000\014\011\uffec" +
    "\013\uffec\014\uffec\030\uffec\032\uffec\001\002\000\014\011" +
    "\uffeb\013\uffeb\014\uffeb\030\uffeb\032\uffeb\001\002\000\014" +
    "\011\026\013\024\014\021\030\022\032\023\001\002\000" +
    "\014\011\uffee\013\uffee\014\uffee\030\uffee\032\uffee\001\002" +
    "\000\014\011\uffea\013\uffea\014\uffea\030\uffea\032\uffea\001" +
    "\002\000\014\011\uffef\013\uffef\014\uffef\030\uffef\032\uffef" +
    "\001\002\000\036\022\031\023\037\024\041\025\045\026" +
    "\046\027\035\032\030\033\036\034\044\035\032\036\033" +
    "\037\042\040\034\041\ufffa\001\002\000\014\004\ufffd\006" +
    "\ufffd\010\ufffd\013\ufffd\041\ufffd\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\010\004\011\005\006\006\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\024\013\017\001\001\000\006\010\056\013\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\037\001\001\000\006\010\026" +
    "\013\017\001\001\000\004\012\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\046\013\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\037" +
    "\001\001\000\002\001\001\000\012\004\051\005\006\006" +
    "\013\007\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\054\005\006\006\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\037\001\001\000\006" +
    "\010\060\013\017\001\001\000\004\012\037\001\001\000" +
    "\012\004\051\005\006\006\013\007\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\072\013\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\037\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token){
	System.err.println("[SYNTAX ERROR] Syntax error at " + cur_token.value);
    }
    public void unrecovered_syntax_error(Symbol cur_token){
	System.err.println("Errore non recuperato coordinate -> " + cur_token.left + " - " + cur_token.right);
    }
    public static void newScope(){
	typenames.push(new HashSet<String>());
    }
    public static void deleteScope(){
	typenames.pop();
    }
    public static boolean lookupType(String name){
	for (HashSet<String> scope: typenames)
	    if (scope.contains(name)) return true;
	return false;
    }
    public static void addType(String name){
	typenames.peek().add(name);
    }
    public static LinkedList<HashSet<String>> typenames = new LinkedList<HashSet<String>>();
    public Parser(Lexer lex, ComplexSymbolFactory sf) {
	super(lex,sf);
    }

    public static void main(String[] args) throws Exception {
      // initialize the symbol factory
      ComplexSymbolFactory csf = new ComplexSymbolFactory();
      // create a buffering scanner wrapper
      ScannerBuffer lexer = new ScannerBuffer(new Lexer(new BufferedReader(new FileReader(args[0])),csf));
      // start parsing
      Parser p = new Parser(lexer,csf);
      XMLElement e = (XMLElement)p.parse().value;

      for (XMLElement el: SyntaxTreeXPath.query(args[2],e)){
      	  System.out.println(el.getTagname());
      }


      TestVisitor t = new TestVisitor();
      SyntaxTreeDFS.dfs(e,t);

      // create XML output file 
      XMLOutputFactory outFactory = XMLOutputFactory.newInstance();
      XMLStreamWriter sw = outFactory.createXMLStreamWriter(new FileOutputStream(args[1]));
      // dump XML output to the file
      XMLElement.dump(lexer,sw,e,"expr","stmt");
      
       // transform the parse tree into an AST and a rendered HTML version
      Transformer transformer = TransformerFactory.newInstance()
	    .newTransformer(new StreamSource(new File("xsl/tree.xsl")));
      Source text = new StreamSource(new File(args[1]));
      transformer.transform(text, new StreamResult(new File("xml/output.xml")));
      transformer = TransformerFactory.newInstance()
	    .newTransformer(new StreamSource(new File("xsl/tree-view.xsl")));
      text = new StreamSource(new File("xml/output.xml"));
      transformer.transform(text, new StreamResult(new File("output/ast.html")));

      /* SVG */
      transformer = TransformerFactory.newInstance()
	    .newTransformer(new StreamSource(new File("xsl/tree-view-svg.xsl")));

      text = new StreamSource(new File("xml/output.xml"));

      transformer.transform(text, new StreamResult(new File("output/svg.html")));

  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
                XMLElement RESULT;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location EOF1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location EOF1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object EOF1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("_START",0,(XMLElement)start_val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= CURLYL stmtlist CURLYR 
            {
                XMLElement RESULT;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object br = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location br1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location br1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object br1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("program",0,new XMLElement.Terminal(brxleft,"br",br,brxright),(XMLElement)sl,new XMLElement.Terminal(br1xleft,"br1",br1,br1xright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtlist ::= stmtlist stmt 
            {
                XMLElement RESULT;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location stxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("stmtlist",0,(XMLElement)sl,(XMLElement)st);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtlist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtlist ::= 
            {
                XMLElement RESULT;

                RESULT = new XMLElement.NonTerminal("stmtlist",1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtlist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= simp SEMI 
            {
                XMLElement RESULT;
		Location simplexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location simplexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object simple = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location scxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location scxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("stmt",0,(XMLElement)simple,new XMLElement.Terminal(scxleft,"sc",sc,scxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= control 
            {
                XMLElement RESULT;
		Location coxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location coxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("stmt",1,(XMLElement)co);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= SEMI 
            {
                XMLElement RESULT;
		Location scxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location scxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("stmt",2,new XMLElement.Terminal(scxleft,"sc",sc,scxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // simp ::= IDENT asop exp 
            {
                XMLElement RESULT;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("simp",0,new XMLElement.Terminal(idxleft,"id",id,idxright),(XMLElement)a,(XMLElement)ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simp",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // control ::= IF PARAL exp PARAR ELSE block 
            {
                XMLElement RESULT;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object br = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location br1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location br1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object br1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location blkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object blk = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("control",0,new XMLElement.Terminal(ixleft,"i",i,ixright),new XMLElement.Terminal(brxleft,"br",br,brxright),(XMLElement)ex,new XMLElement.Terminal(br1xleft,"br1",br1,br1xright),new XMLElement.Terminal(elxleft,"el",el,elxright),(XMLElement)blk);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // control ::= IF PARAL exp PARAR 
            {
                XMLElement RESULT;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object br = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location br1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location br1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object br1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("control",1,new XMLElement.Terminal(ixleft,"i",i,ixright),new XMLElement.Terminal(brxleft,"br",br,brxright),(XMLElement)ex,new XMLElement.Terminal(br1xleft,"br1",br1,br1xright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // control ::= WHILE PARAL exp PARAR block 
            {
                XMLElement RESULT;
		Location wlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location wlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object wl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object br = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location br1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location br1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object br1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location blkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object blk = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("control",2,new XMLElement.Terminal(wlxleft,"wl",wl,wlxright),new XMLElement.Terminal(brxleft,"br",br,brxright),(XMLElement)ex,new XMLElement.Terminal(br1xleft,"br1",br1,br1xright),(XMLElement)blk);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // block ::= stmt 
            {
                XMLElement RESULT;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("block",0,(XMLElement)s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // block ::= CURLYL stmt CURLYR 
            {
                XMLElement RESULT;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object br = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location br1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location br1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object br1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("block",1,new XMLElement.Terminal(brxleft,"br",br,brxright),(XMLElement)s,new XMLElement.Terminal(br1xleft,"br1",br1,br1xright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= PARAL exp PARAR 
            {
                XMLElement RESULT;
		Location brxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location brxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object br = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location br1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location br1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object br1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("exp",0,new XMLElement.Terminal(brxleft,"br",br,brxright),(XMLElement)ex,new XMLElement.Terminal(br1xleft,"br1",br1,br1xright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= INTCONST 
            {
                XMLElement RESULT;
		Location costxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location costxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object cost = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("exp",1,new XMLElement.Terminal(costxleft,"cost",cost,costxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= IDENT 
            {
                XMLElement RESULT;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("exp",2,new XMLElement.Terminal(idxleft,"id",id,idxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= unop exp 
            {
                XMLElement RESULT;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("exp",3,(XMLElement)u,(XMLElement)ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp binop exp 
            {
                XMLElement RESULT;
		Location ex1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ex1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location boxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location boxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object bo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ex2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ex2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("exp",4,(XMLElement)ex1,(XMLElement)bo,(XMLElement)ex2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // asop ::= ASSIGN 
            {
                XMLElement RESULT;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("asop",0,new XMLElement.Terminal(axleft,"a",a,axright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asop",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // asop ::= ADD_ASSIGN 
            {
                XMLElement RESULT;
		Location aaxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aaxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("asop",1,new XMLElement.Terminal(aaxleft,"aa",aa,aaxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asop",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // asop ::= SUB_ASSIGN 
            {
                XMLElement RESULT;
		Location saxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location saxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object sa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("asop",2,new XMLElement.Terminal(saxleft,"sa",sa,saxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asop",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asop ::= MUL_ASSIGN 
            {
                XMLElement RESULT;
		Location maxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location maxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("asop",3,new XMLElement.Terminal(maxleft,"ma",ma,maxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asop",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asop ::= SCROPPO_ASSIGN 
            {
                XMLElement RESULT;
		Location scraxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location scraxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object scra = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("asop",4,new XMLElement.Terminal(scraxleft,"scra",scra,scraxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asop",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asop ::= MOD_ASSIGN 
            {
                XMLElement RESULT;
		Location mdaxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mdaxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object mda = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("asop",5,new XMLElement.Terminal(mdaxleft,"mda",mda,mdaxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asop",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // binop ::= PLUS 
            {
                XMLElement RESULT;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("binop",0,new XMLElement.Terminal(pxleft,"p",p,pxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // binop ::= MINUS 
            {
                XMLElement RESULT;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("binop",1,new XMLElement.Terminal(mxleft,"m",m,mxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // binop ::= MUL 
            {
                XMLElement RESULT;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("binop",2,new XMLElement.Terminal(mxleft,"m",m,mxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // binop ::= DIVIDE 
            {
                XMLElement RESULT;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("binop",3,new XMLElement.Terminal(dxleft,"d",d,dxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // binop ::= MODULUS 
            {
                XMLElement RESULT;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("binop",4,new XMLElement.Terminal(mxleft,"m",m,mxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // binop ::= LESS 
            {
                XMLElement RESULT;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("binop",5,new XMLElement.Terminal(lxleft,"l",l,lxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // binop ::= LE_OP 
            {
                XMLElement RESULT;
		Location loxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location loxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object lo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("binop",6,new XMLElement.Terminal(loxleft,"lo",lo,loxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // binop ::= GREATER 
            {
                XMLElement RESULT;
		Location gxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location gxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("binop",7,new XMLElement.Terminal(gxleft,"g",g,gxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // binop ::= GE_OP 
            {
                XMLElement RESULT;
		Location goxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location goxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object go = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("binop",8,new XMLElement.Terminal(goxleft,"go",go,goxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // binop ::= EQ_OP 
            {
                XMLElement RESULT;
		Location eoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location eoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("binop",9,new XMLElement.Terminal(eoxleft,"eo",eo,eoxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // binop ::= NE_OP 
            {
                XMLElement RESULT;
		Location noxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location noxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object no = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("binop",10,new XMLElement.Terminal(noxleft,"no",no,noxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // binop ::= AND_OP 
            {
                XMLElement RESULT;
		Location aoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ao = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("binop",11,new XMLElement.Terminal(aoxleft,"ao",ao,aoxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // binop ::= OR_OP 
            {
                XMLElement RESULT;
		Location ooxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ooxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object oo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("binop",12,new XMLElement.Terminal(ooxleft,"oo",oo,ooxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // unop ::= NOT 
            {
                XMLElement RESULT;
		Location noxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location noxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object no = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("unop",0,new XMLElement.Terminal(noxleft,"no",no,noxright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unop ::= MINUS 
            {
                XMLElement RESULT;
		Location mixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object mi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                RESULT = new XMLElement.NonTerminal("unop",1,new XMLElement.Terminal(mixleft,"mi",mi,mixright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
