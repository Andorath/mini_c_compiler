import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ScannerBuffer;
import java_cup.runtime.XMLElement;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamWriter;
import java.io.*;
import java.util.*;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;  

parser code {:
    public void syntax_error(Symbol cur_token)
    {
	   System.err.println("[SYNTAX ERROR] Syntax error at " + cur_token.value);
    }
    public void unrecovered_syntax_error(Symbol cur_token)
    {
	   System.err.println("Errore non recuperato coordinate -> " + cur_token.left + " - " + cur_token.right);
    }
    
    public Parser(Lexer lex, ComplexSymbolFactory sf) 
    {
	   super(lex,sf);
    }

    public static void main(String[] args) throws Exception 
    {
        ComplexSymbolFactory csf = new ComplexSymbolFactory();

        ScannerBuffer lexer = new ScannerBuffer(new Lexer(new BufferedReader(new FileReader(args[0])),csf));

        // start parsing

        Parser p = new Parser(lexer,csf);
        XMLElement e = (XMLElement)p.parse().value;

        for (XMLElement el: SyntaxTreeXPath.query(args[2],e)){
        System.out.println(el.getTagname());
        }


        TestVisitor t = new TestVisitor();
        SyntaxTreeDFS.dfs(e,t);

        // create XML output file 
        XMLOutputFactory outFactory = XMLOutputFactory.newInstance();
        XMLStreamWriter sw = outFactory.createXMLStreamWriter(new FileOutputStream(args[1]));
        // dump XML output to the file
        XMLElement.dump(lexer,sw,e,"expr","stmt");

        // transform the parse tree into an AST and a rendered HTML version
        Transformer transformer = TransformerFactory.newInstance()
        .newTransformer(new StreamSource(new File("xsl/tree.xsl")));
        Source text = new StreamSource(new File(args[1]));
        transformer.transform(text, new StreamResult(new File("output/output.xml")));

        transformer = TransformerFactory.newInstance()
        .newTransformer(new StreamSource(new File("xsl/tree-view.xsl")));
        text = new StreamSource(new File("output/output.xml"));
        transformer.transform(text, new StreamResult(new File("output/ast.html")));

        /* SVG */

        transformer = TransformerFactory.newInstance()
        .newTransformer(new StreamSource(new File("xsl/tree-view-svg.xsl")));
        text = new StreamSource(new File("output/output.xml"));
        transformer.transform(text, new StreamResult(new File("output/svg.html")));

  }
:};

/* TERMINAL */
terminal IF, ELSE, WHILE, CURLYL, CURLYR, PARAL, PARAR, IDENT, INTCONST,
	  ADD_ASSIGN, SUB_ASSIGN, MUL_ASSIGN, SCROPPO_ASSIGN, MOD_ASSIGN,
	  LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, NOT, ASSIGN, MINUS,
	  PLUS, MUL, DIVIDE, MODULUS, LESS, GREATER, SEMI;


/* NON TERMINAL */
non terminal	program;
non terminal 	stmtlist;
non terminal	stmt;
non terminal	simp;
non terminal	control;
non terminal	block;
non terminal	exp;
non terminal	asop;
non terminal	binop;
non terminal	unop;

/* PRECEDENCES */
precedence nonassoc PARAR, PARAL;
precedence right NOT;
precedence left MUL, DIVIDE, MODULUS;
precedence left PLUS, MINUS;
precedence left LESS, LE_OP, GREATER, GE_OP;
precedence left EQ_OP, NE_OP;
precedence left AND_OP;
precedence left OR_OP;
precedence left ASSIGN, ADD_ASSIGN,  SUB_ASSIGN, MUL_ASSIGN, SCROPPO_ASSIGN, MOD_ASSIGN; 

start with program;

/* GRAMMAR */

program		::= CURLYL:br stmtlist:sl CURLYR:br1
            ;

stmtlist	::= stmtlist:sl stmt:st
            |
            ;

stmt		::= simp:simple SEMI:sc
            | control:co
            | SEMI:sc
            ;

simp		::= IDENT:id asop:a exp:ex
            ;

control		::= IF:i PARAL:br exp:ex PARAR:br1 ELSE:el block:blk
            | IF:i PARAL:br exp:ex PARAR:br1 
            | WHILE:wl PARAL:br exp:ex PARAR:br1 block:blk
            ;

block		::= stmt:s
            | CURLYL:br stmt:s CURLYR:br1
            ;

exp         ::= PARAL:br exp:ex PARAR:br1
            | INTCONST:cost
            | IDENT:id
            | unop:u exp:ex
            | exp:ex1 binop:bo exp:ex2
            ;

asop		::= ASSIGN:a
            | ADD_ASSIGN:aa
            | SUB_ASSIGN:sa
            | MUL_ASSIGN:ma
            | SCROPPO_ASSIGN:scra
            | MOD_ASSIGN:mda
            ;

binop		::= PLUS:p
            | MINUS:m
            | MUL:m
            | DIVIDE:d
            | MODULUS:m
            | LESS:l
            | LE_OP:lo
            | GREATER:g
            | GE_OP:go
            | EQ_OP:eo
            | NE_OP:no
            | AND_OP:ao
            | OR_OP:oo
            ;

unop		::= NOT:no
            | MINUS:mi
            ;











